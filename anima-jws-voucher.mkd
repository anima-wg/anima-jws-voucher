---
title: JWS signed Voucher Artifacts for Bootstrapping Protocols
abbrev: JWS-voucher
docname: draft-ietf-anima-jws-voucher-14
submissionType: IETF

stand_alone: true

ipr: trust200902
area: Internet
wg: anima Working Group
kw: Internet-Draft
cat: std

pi:    # can use array (if all yes) or hash here
  toc: yes
  sortrefs:   # defaults to yes
  symrefs: yes

author:

- ins: T. Werner
  name: Thomas Werner
  org: Siemens AG
  email: thomas-werner@siemens.com

- ins: M. Richardson
  name: Michael Richardson
  org: Sandelman Software Works
  email: mcr+ietf@sandelman.ca

contributor:
- ins: T. Eckert
  name: Toerless Eckert
  org: Futurewei Technologies Inc.
  email: tte+ietf@cs.fau.de
- ins: E. Dijk
  name: Esko Dijk
  email: esko.dijk@iotconsultancy.nl
- ins: S. Fries
  name: Steffen Fries
  org: Siemens AG
  email: steffen.fries@siemens.com

normative:
  BRSKI: RFC8995
  I-D.ietf-anima-rfc8366bis:
  RFC5280:
  RFC7515:
  RFC8259:

informative:
  RFC8572:
  RFC3629:
  RFC5652:
  RFC7950:
  RFC7951:
  RFC8366:
  RFC8792:
  RFC8812:
  ON-PATH:
    target: "https://mailarchive.ietf.org/arch/msg/saag/m1r9uo4xYznOcf85Eyk0Rhut598/"
    title: "can an on-path attacker drop traffic?"
    org: IETF

--- abstract

I-D.ietf-anima-rfc8366bis defines a digital artifact (known as a voucher) as a YANG-defined JSON document that is signed using a Cryptographic Message Syntax (CMS) structure.
This document introduces a variant of the voucher artifact in which CMS is replaced by the JSON Object Signing and Encryption (JOSE) mechanism described in RFC7515 to support deployments in which JOSE is preferred over CMS.
In addition to specifying the format, the "application/voucher-jws+json" media type is registered and examples are provided.

--- middle

# Introduction

"A Voucher Artifact for Bootstrapping Protocols" {{I-D.ietf-anima-rfc8366bis}} defines a YANG data model
used in "Bootstrapping Remote Secure Key Infrastructure" (BRSKI) {{!RFC8995}} and "Secure Zero Touch Provisioning" (SZTP) {{?RFC8572}}
to transfer ownership of a device from a manufacturer to a new owner (customer or operational domain).
That document provides a serialization of the voucher data to JSON {{RFC8259}} with cryptographic signing according to the Cryptographic Message Syntax (CMS) {{?RFC5652}}.
That resulting voucher artifact has the media type `application/voucher-cms+json`.

This document provides cryptographic signing of voucher data in form of JSON Web Signature (JWS) {{RFC7515}} and the media type `application/voucher-jws+json` to identify the voucher format.
The encoding specified in this document is used by {{?I-D.ietf-anima-brski-prm}}
and may be more handy for use cases already using Javascript Object Signing and Encryption (JOSE).

This document should be considered as enhancement of {{I-D.ietf-anima-rfc8366bis}}, as it provides a new voucher format.
It is similar to {{?I-D.ietf-anima-constrained-voucher}}, which provides cryptographic signing according COSE {{?RFC8812}} and the media type `application/voucher-cose+cbor`.
These documents do not change nor extend the YANG definitions of {{I-D.ietf-anima-rfc8366bis}}.

With the availability of different voucher formats, it is up to an industry-specific application statement to decide which format is to be used.
The associated media types are used to distinguish different voucher formats.

# Terminology

{::boilerplate bcp14}

This document uses the following terms:

JSON Voucher Data:
: An unsigned JSON representation of the voucher data.

JWS Voucher:
: A JWS structure signing the JSON Voucher Data.

Voucher:
: A short form for voucher artifact and refers to the signed statement from Manufacturer Authorized Signing Authority (MASA) service that indicates to a Pledge the cryptographic identity of the domain it should trust, per {{I-D.ietf-anima-rfc8366bis}}.

Voucher Data:
: The raw (serialized) representation of the `ietf-voucher` YANG module without any enclosing signature, per {{I-D.ietf-anima-rfc8366bis}}.

MASA (Manufacturer Authorized Signing Authority):
: The entity that, for the purpose of this document, issues and signs the vouchers for manufacturer's pledges. In some onboarding protocols, the MASA may have an Internet presence and be integral to the onboarding process, whereas in other protocols the MASA may be an offline service that has no active role in the onboarding process, per {{I-D.ietf-anima-rfc8366bis}}.

Pledge:
: The prospective component attempting to find and securely join a domain. When shipped or in factory reset mode, it only trusts authorized representatives of the manufacturer, per {{I-D.ietf-anima-rfc8366bis}}.

Registrar:
: A representative of the domain that is configured, perhaps autonomically, to decide whether a new device is allowed to join the domain, per {{I-D.ietf-anima-rfc8366bis}}.

This document uses the following encoding notations:

BASE64URL(OCTETS):
: Denotes the base64url encoding of OCTETS, per {{Section 2 of RFC7515}}.

UTF8(STRING):
: Denotes the octets of the UTF-8 {{RFC3629}} representation of STRING, per {{Section 1 of RFC7515}}.

# Voucher Artifact with JSON Web Signature

JWS voucher artifacts MUST use the "General JWS JSON Serialization Syntax" defined in {{Section 7.2.1 of RFC7515}}.
This syntax supports multiple signatures as already supported by {{RFC8366}} for CMS-signed vouchers.
The following figure summarizes the serialization of JWS voucher artifacts:

~~~~
    {
      "payload": BASE64URL(UTF8(JSON Voucher Data)),
      "signatures": [
        {
          "protected": BASE64URL(UTF8(JWS Protected Header)),
          "signature": BASE64URL(JWS Signature)
        }
      ]
    }
~~~~
{: #VoucherGeneralJWSFigure title="Voucher Representation in General JWS JSON Serialization Syntax (JWS Voucher)" artwork-align="left"}

The JSON Voucher Data MUST be UTF-8 encoded to become the octet-based JWS Payload defined in {{RFC7515}}.
The JWS Payload is further base64url-encoded to become the string value of the `payload` member as described in {{Section 3.2 of RFC7515}}.
The octets of the UTF-8 representation of the JWS Protected Header are base64url-encoded to become the string value of the `protected` member.
The generated JWS Signature is base64url-encoded to become the string value of the `signature` member.

## JSON Voucher Data

The JSON Voucher Data is an unsigned JSON document {{RFC8259}} that conforms with the data model described by the ietf-voucher YANG module {{RFC7950}} defined in {{Section 7.3 of I-D.ietf-anima-rfc8366bis}} and is encoded using the rules defined in {{RFC7951}}.
The following figure provides an example of JSON Voucher Data:

~~~~
    {
      "ietf-voucher:voucher": {
        "assertion": "logged",
        "serial-number": "0123456789",
        "nonce": "5742698422680472",
        "created-on": "2022-07-08T03:01:24.618Z",
        "pinned-domain-cert": "base64encodedvalue=="
      }
    }
~~~~
{: #VoucherGeneralJWSVoucherPayloadFigure title='JSON Voucher Data Example' artwork-align="left"}

## JWS Protected Header

The JWS Protected Header defined in {{RFC7515}} uses the standard header parameters `alg`, `typ`, and `x5c`:

* The `alg` parameter MUST contain the algorithm type (e.g., `ES256`) used to create the signature as defined in {{Section 4.1.1 of RFC7515}}.
* The `typ` parameter is optional and used when more than one kind of object could be present in an application data structure as described in {{Section 4.1.9 of RFC7515}}. If present, the `typ` parameter MUST contain the value `voucher-jws+json`.
* If X.509 (PKIX) certificates {{RFC5280}} are used, the `x5c` parameter MUST contain the base64-encoded (not base64url-encoded) X.509 v3 (DER) certificate as defined in {{Section 4.1.6 of RFC7515}} and SHOULD also contain the certificate chain.

Implementation Note:
: base64-encoded values, in contrast to base64url-encoded values, may contain slashes (`/`).
  JSON {{RFC8259}} optionally allows escaping these with backslashes (`\\`).
  Hence, depending on the JSON parser/serializer implementation used, they may or may not be included.
  JWS Voucher parsers MUST be prepared accordingly to extract certificates correctly.

To validate voucher signatures, all certificates of the certificate chain are required up to the trust anchor.
Note, to establish trust the trust anchor SHOULD be provided out-of-band up front.

The following figure gives an example of a JWS Protected Header:

~~~~
    {
      "alg": "ES256",
      "typ": "voucher-jws+json",
      "x5c": [
        "base64encodedvalue1==",
        "base64encodedvalue2=="
      ]
    }
~~~~
{: #VoucherGeneralJWSProtectedHeaderFigure title="JWS Protected Header Example" artwork-align="left"}

## JWS Signature

The JWS Signature is generated over the JWS Protected Header and the JWS Payload (= UTF-8 encoded JSON Voucher Data) as described in {{Section 5.1 of RFC7515}}.

# Privacy Considerations

The Pledge-Voucher-Request (PVR) reveals the IDevID of the component (Pledge) that is in the process of bootstrapping.

A PVR is transported via HTTP-over-TLS.
However, for the Pledge-to-Registrar TLS connection a Pledge provisionally accepts the Registrar server certificate during the TLS server authentication.
Hence, it is subject to disclosure by a Dolev-Yao attacker (a "malicious messenger") {{ON-PATH}}, as explained in {{Section 10.2 of RFC8995}}.

The use of a JWS header brings no new privacy considerations.

# Security Considerations

The issues of how {{I-D.ietf-anima-rfc8366bis}} vouchers are used in a {{BRSKI}} system is addressed in {{Section 11 of RFC8995}}.
This document does not change any of those issues, it just changes the signature technology used for voucher request and response artifacts.

{{Section 9 of RFC8572}} deals with voucher use in Secure Zero Touch Provisioning (SZTP), for which this document also makes no changes to security.

# IANA Considerations

## Media-Type Registry

This section registers `application/voucher-jws+json` in the "Media Types" registry.

### application/voucher-jws+json

    Type name:  application
    Subtype name:  voucher-jws+json
    Required parameters:  none
    Optional parameters:  none
    Encoding considerations:  JWS+JSON vouchers are JOSE objects
                              signed with one or multiple signers.
    Security considerations:  See section [Security Considerations]
    Interoperability considerations:  The format is designed to be
      broadly interoperable.
    Published specification:  [THIS RFC].
    Applications that use this media type:  ANIMA, 6tisch, and other
      zero-touch bootstrapping/provisioning solutions
    Additional information:
      Magic number(s):  None
      File extension(s):  .vjj
      Macintosh file type code(s):  none
    Person & email address to contact for further information:  IETF
      ANIMA WG
    Intended usage:  LIMITED
    Restrictions on usage:  NONE
    Author:  ANIMA WG
    Change controller:  IETF
    Provisional registration? (standards tree only):  NO

# Acknowledgments

We would like to thank the various reviewers for their input,
in particular Steffen Fries, Ingo Wenda, Esko Dijk and Toerless Eckert.
Thanks for the supporting PoC implementations to Hong Rui Li and He Peng Jia.

# Examples

These examples are folded according to the {{RFC8792}} Single Backslash rule.

## Example Pledge-Voucher-Request (PVR)

The following is an example of a Pledge-Voucher-Request (PVR) as JWS Voucher artifact, which would be sent from a Pledge to the Registrar:

~~~~
{
  "payload": "eyJpZXRmLXZvdWNoZXItcmVxdWVzdDp2b3VjaGVyIjp7InNlcmlhbC\
1udW1iZXIiOiJraXQtOTg3NjU0MzIxIiwibm9uY2UiOiJvdmJsOXJKY3R0OFQ5b1RvWn\
RWd3BBPT0iLCJjcmVhdGVkLW9uIjoiMjAyNC0xMS0yMFQxNjoyMDoxMC41NThaIiwicH\
JveGltaXR5LXJlZ2lzdHJhci1jZXJ0IjoiTUlJQ0REQ0NBYk9nQXdJQkFnSUdBWk13Ly\
s0c01Bb0dDQ3FHU000OUJBTUNNRnd4Q3pBSkJnTlZCQVlUQWtGUk1SSXdFQVlEVlFRS0\
RBbE5lVU52YlhCaGJua3hGVEFUQmdOVkJBc01ERTE1VTNWaWMybGthV0Z5ZVRFUE1BME\
dBMVVFQnd3R1RYbFRhWFJsTVJFd0R3WURWUVFEREFoTmVWTnBkR1ZEUVRBZUZ3MHlORE\
V4TVRVeE9EQTBOVGxhRncwek5ERXhNVFV4T0RBME5UbGFNR0l4Q3pBSkJnTlZCQVlUQW\
tGUk1SSXdFQVlEVlFRS0RBbE5lVU52YlhCaGJua3hGREFTQmdOVkJBc01DMDE1VTNWaW\
MybGtZWEo1TVE4d0RRWURWUVFIREFaTmVWTnBkR1V4R0RBV0JnTlZCQU1NRDAxNVUybD\
BaVkpsWjJsemRISmhjakJaTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSUFCUE\
FESCtwemNDUlllZGg0TXhrTlZxcW51aU5PQStiTEhKeG5ndUNURTlWcTlvN2RMbXRMdj\
lYbDZJcUJMbmx0Mm9jY2NrZHdFbzRma2xndU41QVFwdXVqV3pCWk1CMEdBMVVkSlFRV0\
1CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RIREFPQmdOVkhROEJBZjhFQkFNQ0I0QX\
dLQVlEVlIwUkJDRXdINElkYlhsemFYUmxjbVZuYVhOMGNtRnlMbTE1WTI5dGNHRnVlUz\
VqYjIwd0NnWUlLb1pJemowRUF3SURSd0F3UkFJZ1p1RU03RmlnZmZndWtuMklvMTFyTG\
RyM0UyUDE1RjhHZEhuWDJwOG50VWNDSUduVkh1bHpuQWZWMnpOQ2g0VWtWODFobm0vcU\
NlZHEvR3djVFQ4ZE1qbkMifX0",
  "signatures": [
    {
      "protected": "eyJ4NWMiOlsiTUlJQ09EQ0NBZDJnQXdJQkFnSUdBWk13Lys0\
bk1Bb0dDQ3FHU000OUJBTUNNRmd4Q3pBSkJnTlZCQVlUQWtGUk1Sc3dHUVlEVlFRS0RC\
Sk5ZVzUxWm1GamRIVnlaWEl3TURFZ1FVY3hFekFSQmdOVkJBc01Dazl5WjFnZ1ZXNXBk\
RUV4RnpBVkJnTlZCQU1NRGsxaGJuVm1ZV04wZFhKbGNrTkJNQ0FYRFRJME1URXhOVEU0\
TURRMU9Wb1lEems1T1RreE1qTXhNak0xT1RVNVdqQnZNUXN3Q1FZRFZRUUdFd0pCVVRF\
Yk1Ca0dBMVVFQ2d3U1RXRnVkV1poWTNSMWNtVnlNREF4SUVGSE1STXdFUVlEVlFRTERB\
cFBjbWRZSUZWdWFYUkJNUll3RkFZRFZRUUZFdzFyYVhRdE9UZzNOalUwTXpJeE1SWXdG\
QVlEVlFRRERBMUJRa016TGtVM05TMHhNREJCTUZrd0V3WUhLb1pJemowQ0FRWUlLb1pJ\
emowREFRY0RRZ0FFT2RkK2VVYWNhRkJ2QTI3cWd5RkJBMGtqQ1JNL0lzYkxNVlZ6Uk1h\
dm4rblV4aDBvKzJQTUl5MXgyeDA3L0c4VVFrNTVlOUtCVTFaL0VvejhvTEp0cDZONk1I\
Z3dNQVlJS3dZQkJRVUhBU0FFSkJZaWJXRnpZUzEwWlhOMExuaDVlbTFoYm5WbVlXTjBk\
WEpsY2k1amIyMDZPVFEwTXpBZkJnTlZIU01FR0RBV2dCUmxTODAzZmRFM3ZWUVBrWVpi\
TXJia3V3Wk8rekFUQmdOVkhTVUVEREFLQmdnckJnRUZCUWNEQWpBT0JnTlZIUThCQWY4\
RUJBTUNCNEF3Q2dZSUtvWkl6ajBFQXdJRFNRQXdSZ0loQU9SeDdiSko2b3B5dG9ORTJl\
SDR3S04zVHFoY1V3WExJZ1ZyQ3A1WGxwajZBaUVBbjluQWs2OC9HWkhDK3A0Y29ZSE9M\
a25mSllIMWxVQnBxc0ZNOTNuUExCVT0iXSwidHlwIjoidm91Y2hlci1qd3MranNvbiIs\
ImFsZyI6IkVTMjU2In0",
      "signature": "rZ5-QXRHbYqDGg9pn_ee4KUXVOG430T4qFKvC4f-GDoDAjCg\
fS2okefBPgekBhAgIKq1OqKSyydah8aE8r-ZGw"
    }
  ]
}
~~~~
{: #ExamplePledgeVoucherRequestfigure title="Example Pledge-Voucher-Request (PVR)" artwork-align="left"}

The following private key (of the IDevID) is used to sign a Pledge-Voucher-Request (PVR) by Pledge:

~~~~
-----BEGIN PRIVATE KEY-----
MEECAQAwEwYHKoZIzj0CAQYIKoZIzj0DAQcEJzAlAgEBBCB9DPTt6EZcuVJ7ptTc
jyNA93JpuXRXpHK2boJRlJd3lQ==
-----END PRIVATE KEY-----
-----BEGIN CERTIFICATE-----
MIICODCCAd2gAwIBAgIGAZMw/+4nMAoGCCqGSM49BAMCMFgxCzAJBgNVBAYTAkFR
MRswGQYDVQQKDBJNYW51ZmFjdHVyZXIwMDEgQUcxEzARBgNVBAsMCk9yZ1ggVW5p
dEExFzAVBgNVBAMMDk1hbnVmYWN0dXJlckNBMCAXDTI0MTExNTE4MDQ1OVoYDzk5
OTkxMjMxMjM1OTU5WjBvMQswCQYDVQQGEwJBUTEbMBkGA1UECgwSTWFudWZhY3R1
cmVyMDAxIEFHMRMwEQYDVQQLDApPcmdYIFVuaXRBMRYwFAYDVQQFEw1raXQtOTg3
NjU0MzIxMRYwFAYDVQQDDA1BQkMzLkU3NS0xMDBBMFkwEwYHKoZIzj0CAQYIKoZI
zj0DAQcDQgAEOdd+eUacaFBvA27qgyFBA0kjCRM/IsbLMVVzRMavn+nUxh0o+2PM
Iy1x2x07/G8UQk55e9KBU1Z/Eoz8oLJtp6N6MHgwMAYIKwYBBQUHASAEJBYibWFz
YS10ZXN0Lnh5em1hbnVmYWN0dXJlci5jb206OTQ0MzAfBgNVHSMEGDAWgBRlS803
fdE3vVQPkYZbMrbkuwZO+zATBgNVHSUEDDAKBggrBgEFBQcDAjAOBgNVHQ8BAf8E
BAMCB4AwCgYIKoZIzj0EAwIDSQAwRgIhAORx7bJJ6opytoNE2eH4wKN3TqhcUwXL
IgVrCp5Xlpj6AiEAn9nAk68/GZHC+p4coYHOLknfJYH1lUBpqsFM93nPLBU=
-----END CERTIFICATE-----
-----BEGIN CERTIFICATE-----
MIIB7DCCAZGgAwIBAgIGAZMw/+4RMAoGCCqGSM49BAMCMFgxCzAJBgNVBAYTAkFR
MRswGQYDVQQKDBJNYW51ZmFjdHVyZXIwMDEgQUcxEzARBgNVBAsMCk9yZ1ggVW5p
dEExFzAVBgNVBAMMDk1hbnVmYWN0dXJlckNBMCAXDTI0MTExNTE4MDQ1OVoYDzk5
OTkxMjMxMjM1OTU5WjBYMQswCQYDVQQGEwJBUTEbMBkGA1UECgwSTWFudWZhY3R1
cmVyMDAxIEFHMRMwEQYDVQQLDApPcmdYIFVuaXRBMRcwFQYDVQQDDA5NYW51ZmFj
dHVyZXJDQTBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABKGK1Jfq6nIjhePCexmI
4yDfg5wv0747uxGFPjXyCRtlS8/BTRLaBW9AmNB70CPW376BxPige1Lx3B7aN/Mj
8oWjRTBDMBIGA1UdEwEB/wQIMAYBAf8CAQEwDgYDVR0PAQH/BAQDAgIEMB0GA1Ud
DgQWBBRlS803fdE3vVQPkYZbMrbkuwZO+zAKBggqhkjOPQQDAgNJADBGAiEAvbsq
5k/991S+jMVFObnv8wNh96VdGX6EcCOiLPgo2fACIQDCCFY21mO9hnfJybCPYNQI
vFa5nvaNiJn9jz4CfmNpIw==
-----END CERTIFICATE-----
~~~~

## Example Parboiled Registrar-Voucher-Request (RVR)

The term parboiled refers to food which is partially cooked.
In {{BRSKI}}, the term refers to a Pledge-Voucher-Request (PVR) that was received by the Registrar,
then has been processed by the Registrar ("cooked"),
and is now being forwarded to the MASA.

The following is an example Registrar-Voucher-Request (RVR) as JWS Voucher artifact, which would be sent from the Registrar to the MASA.
Note, the previous PVR can be seen in the payload in the field `prior-signed-voucher-request`.

~~~~
{
  "payload": "eyJpZXRmLXZvdWNoZXItcmVxdWVzdDp2b3VjaGVyIjp7InNlcmlhbC\
1udW1iZXIiOiJraXQtOTg3NjU0MzIxIiwiaWRldmlkLWlzc3VlciI6IkJCZ3dGb0FVWl\
V2Tk4zM1JONzFVRDVHR1d6SzI1THNHVHZzPSIsIm5vbmNlIjoib3ZibDlySmN0dDhUOW\
9Ub1p0VndwQT09IiwicHJpb3Itc2lnbmVkLXZvdWNoZXItcmVxdWVzdCI6ImV5SndZWG\
xzYjJGa0lqb2laWGxLY0ZwWVVtMU1XRnAyWkZkT2IxcFlTWFJqYlZaNFpGZFdlbVJFY0\
RKaU0xWnFZVWRXZVVscWNEZEpiazVzWTIxc2FHSkRNWFZrVnpGcFdsaEphVTlwU25KaF\
dGRjBUMVJuTTA1cVZUQk5la2w0U1dsM2FXSnRPWFZaTWxWcFQybEtkbVJ0U25OUFdFcE\
xXVE5TTUU5R1VUVmlNVkoyVjI1U1YyUXpRa0pRVkRCcFRFTkthbU50Vm1oa1IxWnJURm\
M1ZFVscWIybE5ha0Y1VGtNd2VFMVRNSGxOUmxGNFRtcHZlVTFFYjNoTlF6UXhUbFJvWV\
VscGQybGpTRXAyWlVkc2RHRllValZNV0Vwc1dqSnNlbVJJU21oamFURnFXbGhLTUVscW\
IybFVWV3hLVVRCU1JWRXdUa0paYXpsdVVWaGtTbEZyUm01VFZXUkNWMnN4TTB4NWN6Qm\
pNREZDWWpCa1JGRXpSa2hWTURBd1QxVktRbFJWVGs1U2JtUTBVVE53UWxOclNtNVViRn\
BEVVZac1ZWRlhkRWRWYXpGVFUxaGtSbEZXYkVWV2JFWlNVekJTUW1KRk5XeFdWVFV5V1\
d4b1EyRkhTblZoTTJoSFZrVkdWVkZ0WkU5V2EwcENZekF4UlZKVVJURldWRTVYWVZkTm\
VXSkhkR2hXTUZvMVdsWlNSbFZGTVVKTlJXUkNUVlpXUmxGdVpETlNNVkpaWWtaU2FGZE\
dTbk5VVmtwR1pEQlNNMWRWVWxkVlZrWkZVa1ZHYjFSdFZsZFVia0pyVWpGYVJWVldVa0\
phVlZvelRVaHNUMUpGVmpSVVZsSldaVVU1UlZGVVFrOVdSM2hvVW01amQyVnJOVVZTV0\
doT1ZrWldORlF3VWtKTlJUVlZZa2RHVGxJd2JEUlJNM0JDVTJ0S2JsUnNXa05SVm14Vl\
VWZDBSMVZyTVZOVFdHUkdVVlpzUlZac1JsSlRNRkpDWWtVMWJGWlZOVEpaYkdoRFlVZE\
tkV0V6YUVkU1JVWlVVVzFrVDFaclNrSmpNREZFVFVSRk1WWlVUbGRoVjAxNVlrZDBXbG\
RGYnpGVVZrVTBaREJTVWxkVlVsZFZWa1pKVWtWR1lWUnRWbGRVYmtKclVqRldORkl3VW\
tKV01FcHVWR3hhUTFGVk1VNVNSRUY0VGxaVmVXSkVRbUZXYTNCelYycEtjMlZ0VWtsVG\
JXaHFZV3RLWVZSVlNrNVNNRW8xWTFWa1ZGUlVVVFZSVjJSR1VqQk9SR05WWkZSVVZGRT\
FVVmhrUmxORlJYZFRWVVpEVlVWR1JWTkRkSGRsYlU1RVZXeHNiRnBIWnpCVVdHaHlWR3\
hhZUdOWE5URmhWVFZRVVZOMGFWUkZhRXRsUnpWdVpGVk9WVkpVYkZkalZHeDJUakpTVF\
dKWVVrMWthbXhaWWtSYVNtTlZTazFpYlhnd1RXMDVhbGt5VG5KYVNHUkdZbnBTYldFeW\
VHNWtWVFF4VVZaR2QyUllWbkZXTTNCRFYyc3hRMDFGWkVKTlZsWnJVMnhHVWxZd01VTl\
ZWV1JFVVROT1NGRldSbFpTYTBvelZGVktRMW95WkhsUmJXUkdVbXRLVWxrd1VrbFNSVV\
pRVVcxa1QxWnJhRkpQUlVwQ1dtcG9SbEZyUms1Uk1Fa3dVVmhrVEZGV2JFVldiRWwzVl\
d0S1JGSllaRWxPUld4cldXeG9jMlZ0UmxsVmJYaHFZbFphZFZsV2FFOU5SMDUwVW01c1\
RXSlVSVEZYVkVrMVpFZE9TRkp1Vm14VmVsWnhXV3BKZDJRd1RtNVhWV3hNWWpGd1NtVn\
RiM2RTVlVZelUxVlNVMlF3UmpOVmEwWktXakZ3TVZKVk1ETlNiV3h1V20xYWJtUlhkSF\
ZOYTJ4MlRWUkdlVlJIVW5sTk1GVjVWVVJGTVZKcWFFaGFSV2gxVjBSS2QwOUhOVEJXVj\
A1RVUxVmtkVlpyYURGaVNIQjFVVmRhVjAxdWNFOVJNbWN3VmxkMFYwOUVSbTlpYlRCMl\
kxVk9iRnBJUlhaU00yUnFWa1pSTkZwRk1YRmlhMDFwWmxnd0lpd2ljMmxuYm1GMGRYSm\
xjeUk2VzNzaWNISnZkR1ZqZEdWa0lqb2laWGxLTkU1WFRXbFBiSE5wVkZWc1NsRXdPVV\
ZSTUU1Q1drUktibEZZWkVwUmEwWnVVMVZrUWxkck1UTk1lWE13WW1zeFFtSXdaRVJSTT\
BaSVZUQXdNRTlWU2tKVVZVNU9VbTFrTkZFemNFSlRhMHB1Vkd4YVExRldiRlZSVjNSSF\
ZXc3hVMk16WkVoVlZteEZWbXhHVWxNd1VrTlRhelZhVm5wVmVGZHRNVWRoYlZKSlZtNX\
NZVmRGYkROVVZWSkdXakZHVmxremFFWmxhMFpUVVcxa1QxWnJTa0pqTURGRVlYcHNOVm\
RxUm01YU1WcFlUbGhDYTFKVlZqUlNibkJDVm10S2JsUnNXa05SVlRGT1VrZHplR0ZIU2\
5WV2JURmFWakEwZDFwR2FFdGlSMDV5Vkd0S1RsRXdSbGxTUmxKS1RVVXhWVkpZYUU5V1\
JWVXdWRlZTVWsxVk9WZGlNV3hGWlcxek1WUXhVbkpsUlRGeFZGaG9UbUZyTUhoVU1WSl\
dUbFprY1ZGdVdrNVZXRTR6VVRGR1dsSkdXbEpWVldSR1pEQndRMVpXVWtaWmF6RkRZVE\
JrUWsxV1ZrWlJNbVF6VlRGU1dGSnVWbXRXTVhCdlYxUk9VMDFYVG5SV2JteE9Va1ZHTk\
ZOVlZrZFRSVEZUVkZoa1JsVldiRVZXYkVaU1ZFVlNRbU5HUW1waVYxSmFVMVZhVjJSWF\
JsbFZhMHBPVld4c00xSnJSbHBTUmxwU1ZWVmFSbVI2Um5sWlZtaFNaRVU1VlZwNlRrOW\
hiRlYzVkZod1NtVkZNVk5YV0dSSFVWWnNSVlpzUmxKU1JWSkNUVlZLVW1Fd01UWlVSM1\
JXVFRBMVZFMUlhRTVTUlVwRFZGVmFjbVF3VmpOWFZXaE1ZakZ3U21WdGIzZFJNRVpTVj\
FWc1RHSXhjRXBsYlc5M1VrVkdVbGt3VWxKYU1FWkdWREpTYTBzeVZsWlpWMDVvVW10S0\
1sRlVTVE5qVjJRMVVtdEtRazFIZEhGUk1VcE9UREJzZWxscmVFNVdiRm8yVldzeGFHUn\
ROSEppYkZZMFlVUkNka3Q2U2xGVVZXdzFUVmhuZVdWRVFUTk1NR00wVmxaR2NrNVVWbX\
hQVlhSRFZsUkdZVXd3Vm5abGFtaDJWRVZ3TUdORVdrOU9hekZKV2pOa1RsRldiRXBUTT\
JSYVVXdEtVbFpWYUVKVk1FWkdVMnRLV21GWFNsaFNibkJhVlhwRmQxZHNhRTlOUlhoMV\
lVUldiR0pVUm05WmJUVlhZbFpzV0ZScVFtdFhSWEJ6V1RKck1XRnRTWGxOUkZwUVZrWk\
ZkMVJZY0VKYWEwcHVWR3hhU1ZVd01VWlNNRkpDVmpKa1ExVnRlRlJQUkVGNldtMVNSaz\
B6V2xkVlZrSnlWMVp3YVZSWVNtbGhNMVl6VjJzNGNtVnJSbFZSYldSUFZtdG9WRlpWVm\
tWU1JVWk1VVzFrYm1OclNtNVNWVnBEVlZkT1JWRlhjRUpVTUVwdVZHeGFTVlZVYUVOUl\
YxazBVbFZLUWxSVlRrTk9SVVl6VVRKa1dsTlZkSFpYYTJ3MllXcENSbEZZWkVwU1JrNV\
NVVmhrVTFvd2JHOVJWVGxUWlVSa2FWTnJiekppTTBJMVpFYzVUMUpVU214VFJGSXpVek\
EwZWxaSVJtOVpNVll6VjBWNFNsb3hXbmxSTTBFeFYwZDRkMkZxV2tKaFZWWkNZbXBzZF\
ZGWGN6SlBRemxJVjJ0b1JFc3pRVEJaTWpsYVUwVTVUV0V5TlcxVGJHeEpUVmQ0VmxGdV\
FuaGpNRnBPVDFST2RWVkZlRU5XVkRCcFdGTjNhV1JJYkhkSmFtOXBaRzA1TVZreWFHeG\
phVEZ4WkROTmNtRnVUblppYVVselNXMUdjMXA1U1RaSmExWlVUV3BWTWtsdU1DSXNJbk\
5wWjI1aGRIVnlaU0k2SW5KYU5TMVJXRkpJWWxseFJFZG5PWEJ1WDJWbE5FdFZXRlpQUn\
pRek1GUTBjVVpMZGtNMFppMUhSRzlFUVdwRFoyWlRNbTlyWldaQ1VHZGxhMEpvUVdkSl\
MzRXhUM0ZMVTNsNVpHRm9PR0ZGT0hJdFdrZDNJbjFkZlE9PSIsImNyZWF0ZWQtb24iOi\
IyMDI0LTExLTIwVDE2OjIwOjEwLjcwNloifX0",
  "signatures": [
    {
      "protected": "eyJ4NWMiOlsiTUlJQjhUQ0NBWmFnQXdJQkFnSUdBWk13Lys0\
dE1Bb0dDQ3FHU000OUJBTUNNRnd4Q3pBSkJnTlZCQVlUQWtGUk1SSXdFQVlEVlFRS0RB\
bE5lVU52YlhCaGJua3hGVEFUQmdOVkJBc01ERTE1VTNWaWMybGthV0Z5ZVRFUE1BMEdB\
MVVFQnd3R1RYbFRhWFJsTVJFd0R3WURWUVFEREFoTmVWTnBkR1ZEUVRBZUZ3MHlOREV4\
TVRVeE9EQTBOVGxhRncwek5ERXhNVFV4T0RBME5UbGFNSGt4Q3pBSkJnTlZCQVlUQWtG\
Uk1SSXdFQVlEVlFRS0RBbE5lVU52YlhCaGJua3hGVEFUQmdOVkJBc01ERTE1VTNWaWMy\
bGthV0Z5ZVRFUE1BMEdBMVVFQnd3R1RYbFRhWFJsTVM0d0xBWURWUVFERENWU1pXZHBj\
M1J5WVhJZ1ZtOTFZMmhsY2lCU1pYRjFaWE4wSUZOcFoyNXBibWNnUzJWNU1Ga3dFd1lI\
S29aSXpqMENBUVlJS29aSXpqMERBUWNEUWdBRVRocDZkb1QyWC9rMmplMnVaaDhzSUJ6\
OE9UMGFiNmdvVy9TM29SVVVEamJFOU1xbEc4cUtpL0tFMFliQWJjYXpNa1dWdk5uRFhP\
SlNyamI3TUZteTRxTW5NQ1V3RXdZRFZSMGxCQXd3Q2dZSUt3WUJCUVVIQXh3d0RnWURW\
UjBQQVFIL0JBUURBZ2VBTUFvR0NDcUdTTTQ5QkFNQ0Ewa0FNRVlDSVFDTjkvZERPdExu\
aitNZ2VwSGhadFlsT1FGQ3hITnlLVmpyalBHWDE0NzZpZ0loQU1FU0tvQWk4bVBLazE0\
cyswaEFSOXZmV05hM3RWeWJLQ0xXOHhtZFZlZ2QiXSwidHlwIjoidm91Y2hlci1qd3Mr\
anNvbiIsImFsZyI6IkVTMjU2In0",
      "signature": "u_Dce36bl0Yn4EESw3-Eug8KvuoF9mW5gqiO5UukDHVS8ZbL\
IkjgCPeXM8uQHvh8WV6oTMp91TzxK0qv1s7dYQ"
    }
  ]
}
~~~~
{: #ExampleParboiledRegistrarVoucherRequestfigure title="Example Parboiled Registrar-Voucher-Request (RVR)" artwork-align="left"}

The following private key is used to sign a Registrar-Voucher-Request (RVR) by Registrar:

~~~~
-----BEGIN PRIVATE KEY-----
MEECAQAwEwYHKoZIzj0CAQYIKoZIzj0DAQcEJzAlAgEBBCBHWyAS7tFchxY+5Pv9
2/sNFKc1FioVMgioCcuVcRnx/A==
-----END PRIVATE KEY-----
-----BEGIN CERTIFICATE-----
MIIB8TCCAZagAwIBAgIGAZMw/+4tMAoGCCqGSM49BAMCMFwxCzAJBgNVBAYTAkFR
MRIwEAYDVQQKDAlNeUNvbXBhbnkxFTATBgNVBAsMDE15U3Vic2lkaWFyeTEPMA0G
A1UEBwwGTXlTaXRlMREwDwYDVQQDDAhNeVNpdGVDQTAeFw0yNDExMTUxODA0NTla
Fw0zNDExMTUxODA0NTlaMHkxCzAJBgNVBAYTAkFRMRIwEAYDVQQKDAlNeUNvbXBh
bnkxFTATBgNVBAsMDE15U3Vic2lkaWFyeTEPMA0GA1UEBwwGTXlTaXRlMS4wLAYD
VQQDDCVSZWdpc3RyYXIgVm91Y2hlciBSZXF1ZXN0IFNpZ25pbmcgS2V5MFkwEwYH
KoZIzj0CAQYIKoZIzj0DAQcDQgAEThp6doT2X/k2je2uZh8sIBz8OT0ab6goW/S3
oRUUDjbE9MqlG8qKi/KE0YbAbcazMkWVvNnDXOJSrjb7MFmy4qMnMCUwEwYDVR0l
BAwwCgYIKwYBBQUHAxwwDgYDVR0PAQH/BAQDAgeAMAoGCCqGSM49BAMCA0kAMEYC
IQCN9/dDOtLnj+MgepHhZtYlOQFCxHNyKVjrjPGX1476igIhAMESKoAi8mPKk14s
+0hAR9vfWNa3tVybKCLW8xmdVegd
-----END CERTIFICATE-----
-----BEGIN CERTIFICATE-----
MIIB8TCCAZegAwIBAgIGAZMw/+4qMAoGCCqGSM49BAMCMFwxCzAJBgNVBAYTAkFR
MRIwEAYDVQQKDAlNeUNvbXBhbnkxFTATBgNVBAsMDE15U3Vic2lkaWFyeTEPMA0G
A1UEBwwGTXlTaXRlMREwDwYDVQQDDAhNeVNpdGVDQTAeFw0yNDExMTUxODA0NTla
Fw0zNDExMTUxODA0NTlaMFwxCzAJBgNVBAYTAkFRMRIwEAYDVQQKDAlNeUNvbXBh
bnkxFTATBgNVBAsMDE15U3Vic2lkaWFyeTEPMA0GA1UEBwwGTXlTaXRlMREwDwYD
VQQDDAhNeVNpdGVDQTBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABPdq+JbXi4d3
xyC2KYrVdSZ5yqqpaTpDOSUW95AVDeyg8sPtUoiFmFnvHgNXe3cl1/Icp6MY0qgv
JNRtpbcOtfSjRTBDMBIGA1UdEwEB/wQIMAYBAf8CAQEwDgYDVR0PAQH/BAQDAgIE
MB0GA1UdDgQWBBQbkT6sareajkG87WeocLuz2zOaLDAKBggqhkjOPQQDAgNIADBF
AiB/rMEQVixUsMe0V613Oq8qB+buxDJDKifuCsciWHwvIgIhAKQM09+Tdtbp5VzV
fRPpocbii8ZR4OOiJvHV4Bniw8gz
-----END CERTIFICATE-----
~~~~

## Example Voucher Response

The following is an example voucher response as JWS Voucher artifact, which would be sent from the MASA to the Pledge via Registrar.

~~~~
{
  "payload": "eyJpZXRmLXZvdWNoZXI6dm91Y2hlciI6eyJhc3NlcnRpb24iOiJsb2\
dnZWQiLCJzZXJpYWwtbnVtYmVyIjoia2l0LTk4NzY1NDMyMSIsIm5vbmNlIjoib3ZibD\
lySmN0dDhUOW9Ub1p0VndwQT09IiwiY3JlYXRlZC1vbiI6IjIwMjQtMTEtMjBUMTY6Mj\
A6MTEuMzUwWiIsInBpbm5lZC1kb21haW4tY2VydCI6Ik1JSUI4VENDQVplZ0F3SUJBZ0\
lHQVpNdy8rNHFNQW9HQ0NxR1NNNDlCQU1DTUZ3eEN6QUpCZ05WQkFZVEFrRlJNUkl3RU\
FZRFZRUUtEQWxOZVVOdmJYQmhibmt4RlRBVEJnTlZCQXNNREUxNVUzVmljMmxrYVdGeW\
VURVBNQTBHQTFVRUJ3d0dUWGxUYVhSbE1SRXdEd1lEVlFRRERBaE5lVk5wZEdWRFFUQW\
VGdzB5TkRFeE1UVXhPREEwTlRsYUZ3MHpOREV4TVRVeE9EQTBOVGxhTUZ3eEN6QUpCZ0\
5WQkFZVEFrRlJNUkl3RUFZRFZRUUtEQWxOZVVOdmJYQmhibmt4RlRBVEJnTlZCQXNNRE\
UxNVUzVmljMmxrYVdGeWVURVBNQTBHQTFVRUJ3d0dUWGxUYVhSbE1SRXdEd1lEVlFRRE\
RBaE5lVk5wZEdWRFFUQlpNQk1HQnlxR1NNNDlBZ0VHQ0NxR1NNNDlBd0VIQTBJQUJQZH\
ErSmJYaTRkM3h5QzJLWXJWZFNaNXlxcXBhVHBET1NVVzk1QVZEZXlnOHNQdFVvaUZtRm\
52SGdOWGUzY2wxL0ljcDZNWTBxZ3ZKTlJ0cGJjT3RmU2pSVEJETUJJR0ExVWRFd0VCL3\
dRSU1BWUJBZjhDQVFFd0RnWURWUjBQQVFIL0JBUURBZ0lFTUIwR0ExVWREZ1FXQkJRYm\
tUNnNhcmVhamtHODdXZW9jTHV6MnpPYUxEQUtCZ2dxaGtqT1BRUURBZ05JQURCRkFpQi\
9yTUVRVml4VXNNZTBWNjEzT3E4cUIrYnV4REpES2lmdUNzY2lXSHd2SWdJaEFLUU0wOS\
tUZHRicDVWelZmUlBwb2NiaWk4WlI0T09pSnZIVjRCbml3OGd6In19",
  "signatures": [
    {
      "protected": "eyJ4NWMiOlsiTUlJQnlUQ0NBVzZnQXdJQkFnSUdBWk13Lys0\
ZE1Bb0dDQ3FHU000OUJBTUNNRmd4Q3pBSkJnTlZCQVlUQWtGUk1Sc3dHUVlEVlFRS0RC\
Sk5ZVzUxWm1GamRIVnlaWEl3TURFZ1FVY3hFekFSQmdOVkJBc01Dazl5WjFnZ1ZXNXBk\
RUV4RnpBVkJnTlZCQU1NRGsxaGJuVm1ZV04wZFhKbGNrTkJNQjRYRFRJME1URXhOVEU0\
TURRMU9Wb1hEVE0wTVRFeE5URTRNRFExT1Zvd2FqRUxNQWtHQTFVRUJoTUNRVWN4R3pB\
WkJnTlZCQW9NRWsxaGJuVm1ZV04wZFhKbGNqQXdNU0JCUnpFVE1CRUdBMVVFQ3d3S1Qz\
Sm5XQ0JWYm1sMFFURXBNQ2NHQTFVRUF3d2dUV0Z1ZFdaaFkzUjFjbVZ5SUZadmRXTm9a\
WElnVTJsbmJtbHVaeUJMWlhrd1dUQVRCZ2NxaGtqT1BRSUJCZ2dxaGtqT1BRTUJCd05D\
QUFSQUd6WGh5bXlaM2VCYmJDL1pBVHdYSkE3ZTZwb2h6N2RwWE8zSnJhdDBLRGY2WG43\
ZlpWWVQrYWQ2Vlc0N3JRYnBpVVp2Tm5zNjNOc0dlYzdrcDRoeG94SXdFREFPQmdOVkhR\
OEJBZjhFQkFNQ0I0QXdDZ1lJS29aSXpqMEVBd0lEU1FBd1JnSWhBTytaaFVMVTV5K1cx\
bzhpZ0tHRFI3K1hOYlYyaFI0UVNvMzFJTGRuUHEzNUFpRUFoc3YvK3A4ZFdMS3JoYm02\
N1BxNUZERmRhRk1ObzVzejZHM1dRa0hhSy9rPSJdLCJ0eXAiOiJ2b3VjaGVyLWp3cytq\
c29uIiwiYWxnIjoiRVMyNTYifQ",
      "signature": "Ja2rSUGh36lP09gj-VmWzsECg1gdXcVAU9vyV-WOrd8CZGqN\
QedxQXfjlvr-HgYgTYHEhqLo3JE5ePvq5vO5eA"
    }
  ]
}
~~~~
{: #ExampleVoucherResponsefigure title="Example Voucher Response" artwork-align="left"}

The following private key is used to sign a Voucher by MASA:

~~~~
-----BEGIN PRIVATE KEY-----
MEECAQAwEwYHKoZIzj0CAQYIKoZIzj0DAQcEJzAlAgEBBCD8qlP1JSufuMr+Lc4O
vf5vmS9XDlQM0zDHU5pIOEqlMA==
-----END PRIVATE KEY-----
-----BEGIN CERTIFICATE-----
MIIByTCCAW6gAwIBAgIGAZMw/+4dMAoGCCqGSM49BAMCMFgxCzAJBgNVBAYTAkFR
MRswGQYDVQQKDBJNYW51ZmFjdHVyZXIwMDEgQUcxEzARBgNVBAsMCk9yZ1ggVW5p
dEExFzAVBgNVBAMMDk1hbnVmYWN0dXJlckNBMB4XDTI0MTExNTE4MDQ1OVoXDTM0
MTExNTE4MDQ1OVowajELMAkGA1UEBhMCQUcxGzAZBgNVBAoMEk1hbnVmYWN0dXJl
cjAwMSBBRzETMBEGA1UECwwKT3JnWCBVbml0QTEpMCcGA1UEAwwgTWFudWZhY3R1
cmVyIFZvdWNoZXIgU2lnbmluZyBLZXkwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNC
AARAGzXhymyZ3eBbbC/ZATwXJA7e6pohz7dpXO3Jrat0KDf6Xn7fZVYT+ad6VW47
rQbpiUZvNns63NsGec7kp4hxoxIwEDAOBgNVHQ8BAf8EBAMCB4AwCgYIKoZIzj0E
AwIDSQAwRgIhAO+ZhULU5y+W1o8igKGDR7+XNbV2hR4QSo31ILdnPq35AiEAhsv/
+p8dWLKrhbm67Pq5FDFdaFMNo5sz6G3WQkHaK/k=
-----END CERTIFICATE-----
-----BEGIN CERTIFICATE-----
MIIB7DCCAZGgAwIBAgIGAZMw/+4RMAoGCCqGSM49BAMCMFgxCzAJBgNVBAYTAkFR
MRswGQYDVQQKDBJNYW51ZmFjdHVyZXIwMDEgQUcxEzARBgNVBAsMCk9yZ1ggVW5p
dEExFzAVBgNVBAMMDk1hbnVmYWN0dXJlckNBMCAXDTI0MTExNTE4MDQ1OVoYDzk5
OTkxMjMxMjM1OTU5WjBYMQswCQYDVQQGEwJBUTEbMBkGA1UECgwSTWFudWZhY3R1
cmVyMDAxIEFHMRMwEQYDVQQLDApPcmdYIFVuaXRBMRcwFQYDVQQDDA5NYW51ZmFj
dHVyZXJDQTBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABKGK1Jfq6nIjhePCexmI
4yDfg5wv0747uxGFPjXyCRtlS8/BTRLaBW9AmNB70CPW376BxPige1Lx3B7aN/Mj
8oWjRTBDMBIGA1UdEwEB/wQIMAYBAf8CAQEwDgYDVR0PAQH/BAQDAgIEMB0GA1Ud
DgQWBBRlS803fdE3vVQPkYZbMrbkuwZO+zAKBggqhkjOPQQDAgNJADBGAiEAvbsq
5k/991S+jMVFObnv8wNh96VdGX6EcCOiLPgo2fACIQDCCFY21mO9hnfJybCPYNQI
vFa5nvaNiJn9jz4CfmNpIw==
-----END CERTIFICATE-----
~~~~
