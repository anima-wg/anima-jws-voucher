---
title: JWS signed Voucher Artifacts for Bootstrapping Protocols
abbrev: JWS-voucher
docname: draft-ietf-anima-jws-voucher-00

stand_alone: true

ipr: trust200902
area: Internet
wg: anima Working Group
kw: Internet-Draft
cat: std
updates: RFC8366

pi:    # can use array (if all yes) or hash here
  toc: yes
  sortrefs:   # defaults to yes
  symrefs: yes

author:


- ins: M. Richardson
  name: Michael Richardson
  org: Sandelman Software Works
  email: mcr+ietf@sandelman.ca

- ins: T. Werner
  name: Thomas Werner
  org: Siemens AG
  email: thomas-werner@siemens.com

contributors:
- ins: T. Eckert
  name: Toerless Eckert
  org: Futurewei Technologies Inc.
  email: tte+ietf@cs.fau.de


normative:
  BRSKI: RFC8995
  SZTP: RFC8572
  RFC8366:
  RFC7515:
  RFC8259:

informative:
  RFC5280:
  RFC5652:
  RFC8949:
  RFC8792:
  RFC8812:
  onpath:
    target: "https://mailarchive.ietf.org/arch/msg/saag/m1r9uo4xYznOcf85Eyk0Rhut598/"
    title: "can an on-path attacker drop traffic?"
    org: IETF

--- abstract

RFC8366 defines a digital artifact called voucher as a YANG-defined JSON
document that has been signed using a Cryptographic Message Syntax (CMS) structure.
This memo introduces a variant of the voucher structure in which CMS is
replaced by the JSON Object Signing and Encryption (JOSE) mechanism described in RFC7515 to better support use-cases in which JOSE is preferred over CMS.

In addition to explaining how the format is created, MIME types are registered and examples are provided.

--- middle

# Introduction

"A Voucher Artifact for Bootstrapping Protocols", {{RFC8366}} describes a voucher artifact used in "Bootstrapping Remote Secure Key Infrastructure" {{BRSKI}} and
"Secure Zero Touch Provisioning" {{SZTP}} to transfer ownership of a device from a manufacturer to an owner.
That document defines the base YANG module, and also the initial serialization to JSON {{RFC8259}}, with a signature provided by {{RFC5652}}.

Other work, {{?I-D.ietf-anima-constrained-voucher}} provides a mapping of the YANG to CBOR {{?RFC8949}} with a signature format of COSE {{RFC8812}}.

This document provides an equivalent mapping of JSON format with the signature format as JSON Web Signature (JWS) {{RFC7515}}.
The encoding specified in this document is required for {{?I-D.ietf-anima-brski-async-enroll}}
and may be required and/or preferred in other use cases, for example when JWS is already used in other parts of the use case, but CMS is not.

This document does not extend the YANG definition of {{RFC8366}} at all, but accepts that other efforts such as {{?I-D.richardson-anima-voucher-delegation}}, {{?I-D.friel-anima-brski-cloud}}, and {{?I-D.ietf-anima-brski-async-enroll}} do.
This document supports signing any of the extended schemas defined in those documents and any new documents that may appear after this one.

With the availability of different encoded vouchers, it is up to an industry specific application statement to indicate/decide which voucher signature format is to be used.
There is no provision across the different voucher signature formats that a receiver could safely recognize which format it uses unless additional context is provided.
For example, {{BRSKI}} provides this context via the MIME-Type for the voucher payload.

This document should be considered an Update to {{RFC8366}} in the category of "See Also"
as per {{?I-D.kuehlewind-update-tag}}.

# Terminology

{::boilerplate bcp14}

# JSON Web Signatures

{{RFC7515}} defines two serializations: the JWS Compact Serialization and the JWS JSON Serialization.
The two serializations are mostly equivalent, and the JWS Compact Serialization format has better library support in web frameworks, so this document restricts itself to that choice.

The {{RFC8366}} JSON structure consists of a nested map, the outer part of which is:

~~~~
{ "ietf-voucher:voucher" : { some inner items }}
~~~~

this is considered the JSON payload as described in {{RFC7515}} section 3.

The JSON Compact Serialization is explained in section 3.1 or section 7.1, and works out to:

~~~~
      BASE64URL(UTF8(JWS Protected Header)) || '.' ||
      BASE64URL(JWS Payload) || '.' ||
      BASE64URL(JWS Signature)
~~~~

Note that this results in a long base64 content (with two interspersed dots).
When using HTTP-over-TLS, the voucher is transmitted in base64 format, even though HTTP can accommodate binary content.
This is done to be most convenient for available JWS libraries, and for humans who are debugging.

There are a number of attributes.
They are:

## Unprotected Header

There is no unprotected header in the Compact Serialization format.

## Protected Header

The standard "typ" and "alg" values described in {{RFC7515}} are expected in the protected headers.

It remains to be determined (XXX), what values, if any, should go into the "typ" header, as in the {{BRSKI}} use cases, there are additional HTTP MIME type headers to indicate content types.

The "alg" should contain the algorithm type such as "ES256".

If PKIX {{RFC5280}} format certificates are used then the {{RFC7515}} section 4.1.6 "x5c"
certificate chain SHOULD be used to contain the certificate and chain.
Vouchers will often need all certificates in the chain, including what would be considered the trust anchor certificate because intermediate devices (such as the Registrar) may need to audit the artifact,
or end systems may need to pin a trust anchor for future operations.
This is consistent with {{BRSKI}} section 5.5.2.

# Privacy Considerations

The Voucher Request reveals the IDevID of the component (Pledge) that is on-boarding.

This request occurs over HTTP-over-TLS, however the Pledge to Registrar transaction is over a provisional TLS session, and it is subject to disclosure via by a Dolev-Yao attacker (a "malicious messenger"){{onpath}}.
This is explained in {{BRSKI}} section 10.2.

The use of a JWS header brings no new privacy considerations.

# Security Considerations

The issues of how {{RFC8366}} vouchers are used in a {{BRSKI}} system is addressed in section 11 of that document.
This document does not change any of those issues, it just changes the signature technology used for vouchers and voucher requests.

{{SZTP}} section 9 deals with voucher use in Secure Zero Touch Provisioning, and this document also makes no changes to security.

# IANA Considerations

## Media-Type Registry

This section registers the 'application/voucher-jws+json' in the "Media Types" registry.

### application/voucher-jws+json

    Type name:  application
    Subtype name:  voucher-jws+json
    Required parameters:  none
    Optional parameters:  none
    Encoding considerations:  JWS+JSON vouchers are JOSE objects
                              signed with one signer.
    Security considerations:  See Security Considerations, Section
    Interoperability considerations:  The format is designed to be
      broadly interoperable.
    Published specification:  THIS RFC.
    Applications that use this media type:  ANIMA, 6tisch, and other
      zero-touch imprinting systems
    Additional information:
      Magic number(s):  None
      File extension(s):  .vjj
      Macintosh file type code(s):  none
    Person & email address to contact for further information:  IETF
      ANIMA WG
    Intended usage:  LIMITED
    Restrictions on usage:  NONE
    Author:  ANIMA WG
    Change controller:  IETF
    Provisional registration? (standards tree only):  NO

# Changelog

* Added adoption call comments from Toerless.  Changed from [RFCxxxx] to [THING] style for some key references.
* TODO: update I-D.ietf-anima-brski-async-enroll to "ietf-anima-brski-prm"

--- back

# Examples

These examples are folded according to {{RFC8792}} Single Backslash rule.

## Example Voucher Request (from Pledge to Registrar)

The following is an example request sent from a Pledge to the Registrar.
This example is from the Siemens reference Registrar system.

INSERT_CODE_FROM_FILE examples/voucher_request_01.b64 END

It contains the following three parts:

Header:

INSERT_CODE_FROM_FILE examples/voucher_request_01-header.b64 END

Payload:

INSERT_CODE_FROM_FILE examples/voucher_request_01-payload.b64 END

Signature:

INSERT_CODE_FROM_FILE examples/voucher_request_01-signature.b64 END


## Example Parboiled Voucher Request (from Registrar to MASA)

The term parboiled refers to food which is partially cooked.
In {{BRSKI}}, the term refers to a Pledge voucher-request (PVR) which has been received by the Registrar, and then has been processed by the Registrar ("cooked"), and is now being forwarded to the MASA.

The following is an example Registrar voucher-request (RVR) sent from the Registrar to the MASA.
This example is from the Siemens reference Registrar system.
Note that the previous PVR can be seen in the payload as "prior-signed-voucher-request".

INSERT_CODE_FROM_FILE examples/parboiled_voucher_request_01.b64 END

It contains the following three parts:

Header:

INSERT_CODE_FROM_FILE examples/parboiled_voucher_request_01-header.b64 END

Payload:

INSERT_CODE_FROM_FILE examples/parboiled_voucher_request_01-payload.b64 END

Signature:

INSERT_CODE_FROM_FILE examples/parboiled_voucher_request_01-signature.b64 END


## Example Voucher Result (from MASA to Pledge, via Registrar)

The following is an example voucher response from MASA to Pledge via Registrar.
This example is from the Siemens reference MASA system.

INSERT_CODE_FROM_FILE examples/voucher_01.b64 END

It contains the following three parts:

Header:

INSERT_CODE_FROM_FILE examples/voucher_01-header.b64 END

Payload:

INSERT_CODE_FROM_FILE examples/voucher_01-payload.b64 END

Signature:

INSERT_CODE_FROM_FILE examples/voucher_01-signature.b64 END




